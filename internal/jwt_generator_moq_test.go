// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"sync"
)

var (
	lockJWTGeneratorMockGenerateAccessToken  sync.RWMutex
	lockJWTGeneratorMockGenerateRefreshToken sync.RWMutex
)

// Ensure, that JWTGeneratorMock does implement JWTGenerator.
// If this is not the case, regenerate this file with moq.
var _ JWTGenerator = &JWTGeneratorMock{}

// JWTGeneratorMock is a mock implementation of JWTGenerator.
//
//     func TestSomethingThatUsesJWTGenerator(t *testing.T) {
//
//         // make and configure a mocked JWTGenerator
//         mockedJWTGenerator := &JWTGeneratorMock{
//             GenerateAccessTokenFunc: func(email string, userClaims map[string]interface{}) (string, error) {
// 	               panic("mock out the GenerateAccessToken method")
//             },
//             GenerateRefreshTokenFunc: func(email string) (string, error) {
// 	               panic("mock out the GenerateRefreshToken method")
//             },
//         }
//
//         // use mockedJWTGenerator in code that requires JWTGenerator
//         // and then make assertions.
//
//     }
type JWTGeneratorMock struct {
	// GenerateAccessTokenFunc mocks the GenerateAccessToken method.
	GenerateAccessTokenFunc func(email string, userClaims map[string]interface{}) (string, error)

	// GenerateRefreshTokenFunc mocks the GenerateRefreshToken method.
	GenerateRefreshTokenFunc func(email string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateAccessToken holds details about calls to the GenerateAccessToken method.
		GenerateAccessToken []struct {
			// Email is the email argument value.
			Email string
			// UserClaims is the userClaims argument value.
			UserClaims map[string]interface{}
		}
		// GenerateRefreshToken holds details about calls to the GenerateRefreshToken method.
		GenerateRefreshToken []struct {
			// Email is the email argument value.
			Email string
		}
	}
}

// GenerateAccessToken calls GenerateAccessTokenFunc.
func (mock *JWTGeneratorMock) GenerateAccessToken(email string, userClaims map[string]interface{}) (string, error) {
	if mock.GenerateAccessTokenFunc == nil {
		panic("JWTGeneratorMock.GenerateAccessTokenFunc: method is nil but JWTGenerator.GenerateAccessToken was just called")
	}
	callInfo := struct {
		Email      string
		UserClaims map[string]interface{}
	}{
		Email:      email,
		UserClaims: userClaims,
	}
	lockJWTGeneratorMockGenerateAccessToken.Lock()
	mock.calls.GenerateAccessToken = append(mock.calls.GenerateAccessToken, callInfo)
	lockJWTGeneratorMockGenerateAccessToken.Unlock()
	return mock.GenerateAccessTokenFunc(email, userClaims)
}

// GenerateAccessTokenCalls gets all the calls that were made to GenerateAccessToken.
// Check the length with:
//     len(mockedJWTGenerator.GenerateAccessTokenCalls())
func (mock *JWTGeneratorMock) GenerateAccessTokenCalls() []struct {
	Email      string
	UserClaims map[string]interface{}
} {
	var calls []struct {
		Email      string
		UserClaims map[string]interface{}
	}
	lockJWTGeneratorMockGenerateAccessToken.RLock()
	calls = mock.calls.GenerateAccessToken
	lockJWTGeneratorMockGenerateAccessToken.RUnlock()
	return calls
}

// GenerateRefreshToken calls GenerateRefreshTokenFunc.
func (mock *JWTGeneratorMock) GenerateRefreshToken(email string) (string, error) {
	if mock.GenerateRefreshTokenFunc == nil {
		panic("JWTGeneratorMock.GenerateRefreshTokenFunc: method is nil but JWTGenerator.GenerateRefreshToken was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	lockJWTGeneratorMockGenerateRefreshToken.Lock()
	mock.calls.GenerateRefreshToken = append(mock.calls.GenerateRefreshToken, callInfo)
	lockJWTGeneratorMockGenerateRefreshToken.Unlock()
	return mock.GenerateRefreshTokenFunc(email)
}

// GenerateRefreshTokenCalls gets all the calls that were made to GenerateRefreshToken.
// Check the length with:
//     len(mockedJWTGenerator.GenerateRefreshTokenCalls())
func (mock *JWTGeneratorMock) GenerateRefreshTokenCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	lockJWTGeneratorMockGenerateRefreshToken.RLock()
	calls = mock.calls.GenerateRefreshToken
	lockJWTGeneratorMockGenerateRefreshToken.RUnlock()
	return calls
}
