// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"github.com/dgrijalva/jwt-go"
	"sync"
)

// Ensure, that JWTProviderMock does implement JWTProvider.
// If this is not the case, regenerate this file with moq.
var _ JWTProvider = &JWTProviderMock{}

// JWTProviderMock is a mock implementation of JWTProvider.
//
// 	func TestSomethingThatUsesJWTProvider(t *testing.T) {
//
// 		// make and configure a mocked JWTProvider
// 		mockedJWTProvider := &JWTProviderMock{
// 			GenerateAccessTokenFunc: func(email string, userClaims map[string]interface{}) (string, error) {
// 				panic("mock out the GenerateAccessToken method")
// 			},
// 			GenerateRefreshTokenFunc: func(email string) (string, string, error) {
// 				panic("mock out the GenerateRefreshToken method")
// 			},
// 			IsTokenValidFunc: func(token string) (bool, jwt.MapClaims, error) {
// 				panic("mock out the IsTokenValid method")
// 			},
// 		}
//
// 		// use mockedJWTProvider in code that requires JWTProvider
// 		// and then make assertions.
//
// 	}
type JWTProviderMock struct {
	// GenerateAccessTokenFunc mocks the GenerateAccessToken method.
	GenerateAccessTokenFunc func(email string, userClaims map[string]interface{}) (string, error)

	// GenerateRefreshTokenFunc mocks the GenerateRefreshToken method.
	GenerateRefreshTokenFunc func(email string) (string, string, error)

	// IsTokenValidFunc mocks the IsTokenValid method.
	IsTokenValidFunc func(token string) (bool, jwt.MapClaims, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateAccessToken holds details about calls to the GenerateAccessToken method.
		GenerateAccessToken []struct {
			// Email is the email argument value.
			Email string
			// UserClaims is the userClaims argument value.
			UserClaims map[string]interface{}
		}
		// GenerateRefreshToken holds details about calls to the GenerateRefreshToken method.
		GenerateRefreshToken []struct {
			// Email is the email argument value.
			Email string
		}
		// IsTokenValid holds details about calls to the IsTokenValid method.
		IsTokenValid []struct {
			// Token is the token argument value.
			Token string
		}
	}
	lockGenerateAccessToken  sync.RWMutex
	lockGenerateRefreshToken sync.RWMutex
	lockIsTokenValid         sync.RWMutex
}

// GenerateAccessToken calls GenerateAccessTokenFunc.
func (mock *JWTProviderMock) GenerateAccessToken(email string, userClaims map[string]interface{}) (string, error) {
	if mock.GenerateAccessTokenFunc == nil {
		panic("JWTProviderMock.GenerateAccessTokenFunc: method is nil but JWTProvider.GenerateAccessToken was just called")
	}
	callInfo := struct {
		Email      string
		UserClaims map[string]interface{}
	}{
		Email:      email,
		UserClaims: userClaims,
	}
	mock.lockGenerateAccessToken.Lock()
	mock.calls.GenerateAccessToken = append(mock.calls.GenerateAccessToken, callInfo)
	mock.lockGenerateAccessToken.Unlock()
	return mock.GenerateAccessTokenFunc(email, userClaims)
}

// GenerateAccessTokenCalls gets all the calls that were made to GenerateAccessToken.
// Check the length with:
//     len(mockedJWTProvider.GenerateAccessTokenCalls())
func (mock *JWTProviderMock) GenerateAccessTokenCalls() []struct {
	Email      string
	UserClaims map[string]interface{}
} {
	var calls []struct {
		Email      string
		UserClaims map[string]interface{}
	}
	mock.lockGenerateAccessToken.RLock()
	calls = mock.calls.GenerateAccessToken
	mock.lockGenerateAccessToken.RUnlock()
	return calls
}

// GenerateRefreshToken calls GenerateRefreshTokenFunc.
func (mock *JWTProviderMock) GenerateRefreshToken(email string) (string, string, error) {
	if mock.GenerateRefreshTokenFunc == nil {
		panic("JWTProviderMock.GenerateRefreshTokenFunc: method is nil but JWTProvider.GenerateRefreshToken was just called")
	}
	callInfo := struct {
		Email string
	}{
		Email: email,
	}
	mock.lockGenerateRefreshToken.Lock()
	mock.calls.GenerateRefreshToken = append(mock.calls.GenerateRefreshToken, callInfo)
	mock.lockGenerateRefreshToken.Unlock()
	return mock.GenerateRefreshTokenFunc(email)
}

// GenerateRefreshTokenCalls gets all the calls that were made to GenerateRefreshToken.
// Check the length with:
//     len(mockedJWTProvider.GenerateRefreshTokenCalls())
func (mock *JWTProviderMock) GenerateRefreshTokenCalls() []struct {
	Email string
} {
	var calls []struct {
		Email string
	}
	mock.lockGenerateRefreshToken.RLock()
	calls = mock.calls.GenerateRefreshToken
	mock.lockGenerateRefreshToken.RUnlock()
	return calls
}

// IsTokenValid calls IsTokenValidFunc.
func (mock *JWTProviderMock) IsTokenValid(token string) (bool, jwt.MapClaims, error) {
	if mock.IsTokenValidFunc == nil {
		panic("JWTProviderMock.IsTokenValidFunc: method is nil but JWTProvider.IsTokenValid was just called")
	}
	callInfo := struct {
		Token string
	}{
		Token: token,
	}
	mock.lockIsTokenValid.Lock()
	mock.calls.IsTokenValid = append(mock.calls.IsTokenValid, callInfo)
	mock.lockIsTokenValid.Unlock()
	return mock.IsTokenValidFunc(token)
}

// IsTokenValidCalls gets all the calls that were made to IsTokenValid.
// Check the length with:
//     len(mockedJWTProvider.IsTokenValidCalls())
func (mock *JWTProviderMock) IsTokenValidCalls() []struct {
	Token string
} {
	var calls []struct {
		Token string
	}
	mock.lockIsTokenValid.RLock()
	calls = mock.calls.IsTokenValid
	mock.lockIsTokenValid.RUnlock()
	return calls
}
