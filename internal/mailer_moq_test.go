// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"sync"
)

// Ensure, that MailerMock does implement Mailer.
// If this is not the case, regenerate this file with moq.
var _ Mailer = &MailerMock{}

// MailerMock is a mock implementation of Mailer.
//
// 	func TestSomethingThatUsesMailer(t *testing.T) {
//
// 		// make and configure a mocked Mailer
// 		mockedMailer := &MailerMock{
// 			SendPasswordResetRequestEMailFunc: func(recipient string, passwordResetToken string, claims map[string]interface{}) error {
// 				panic("mock out the SendPasswordResetRequestEMail method")
// 			},
// 		}
//
// 		// use mockedMailer in code that requires Mailer
// 		// and then make assertions.
//
// 	}
type MailerMock struct {
	// SendPasswordResetRequestEMailFunc mocks the SendPasswordResetRequestEMail method.
	SendPasswordResetRequestEMailFunc func(recipient string, passwordResetToken string, claims map[string]interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// SendPasswordResetRequestEMail holds details about calls to the SendPasswordResetRequestEMail method.
		SendPasswordResetRequestEMail []struct {
			// Recipient is the recipient argument value.
			Recipient string
			// PasswordResetToken is the passwordResetToken argument value.
			PasswordResetToken string
			// Claims is the claims argument value.
			Claims map[string]interface{}
		}
	}
	lockSendPasswordResetRequestEMail sync.RWMutex
}

// SendPasswordResetRequestEMail calls SendPasswordResetRequestEMailFunc.
func (mock *MailerMock) SendPasswordResetRequestEMail(recipient string, passwordResetToken string, claims map[string]interface{}) error {
	if mock.SendPasswordResetRequestEMailFunc == nil {
		panic("MailerMock.SendPasswordResetRequestEMailFunc: method is nil but Mailer.SendPasswordResetRequestEMail was just called")
	}
	callInfo := struct {
		Recipient          string
		PasswordResetToken string
		Claims             map[string]interface{}
	}{
		Recipient:          recipient,
		PasswordResetToken: passwordResetToken,
		Claims:             claims,
	}
	mock.lockSendPasswordResetRequestEMail.Lock()
	mock.calls.SendPasswordResetRequestEMail = append(mock.calls.SendPasswordResetRequestEMail, callInfo)
	mock.lockSendPasswordResetRequestEMail.Unlock()
	return mock.SendPasswordResetRequestEMailFunc(recipient, passwordResetToken, claims)
}

// SendPasswordResetRequestEMailCalls gets all the calls that were made to SendPasswordResetRequestEMail.
// Check the length with:
//     len(mockedMailer.SendPasswordResetRequestEMailCalls())
func (mock *MailerMock) SendPasswordResetRequestEMailCalls() []struct {
	Recipient          string
	PasswordResetToken string
	Claims             map[string]interface{}
} {
	var calls []struct {
		Recipient          string
		PasswordResetToken string
		Claims             map[string]interface{}
	}
	mock.lockSendPasswordResetRequestEMail.RLock()
	calls = mock.calls.SendPasswordResetRequestEMail
	mock.lockSendPasswordResetRequestEMail.RUnlock()
	return calls
}
